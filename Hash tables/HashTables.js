// HASH TABLES

// IS A DATA STRUCTURE THAT USES A HASH FUNCTION TO COMPUTE AN INDEX INTO AN ARRAY OF BUCKETS OR SLOTS, FROM WHICH THE DESIRED VALUE CAN BE FOUND.
//  KEYS = VALUES  THE KEYS ARE GETTING HASHED TO AN INDEX IN THE ARRAY
//  THE HASH FUNCTION IS USED TO MAP THE KEYS TO A LOCATION IN THE ARRAY THAT WE CALL A BUCKET
//  THE BUCKET IS WHERE THE VALUE IS STORED

// HTS ARE OFTEN USED TO TRACK THE FREQUENCY OF WORDS IN A LARGE BODY OF TEXT
//  THE WORDS ARE THE KEYS AND THE VALUES ARE THE NUMBER OF TIMES THE WORD APPEARS IN THE TEXT

// HASH FUNCTIONS
// A HASH FUNCTIONV IS A FUNCTION THAT MAPS A KEY X TO A WHOLE NUMBER IN A FIXED RANGE
//  A HASH FUNCTION IS A FUNCTION THAT CAN BE USED TO MAP DATA OF ARBITRARY SIZE TO DATA OF A FIXED SIZE
//  THE VALUES RETURNED BY A HASH FUNCTION ARE CALLED HASH VALUES, HASH CODES, DIGESTS, OR CHECKSUMS
//  A GOOD HASH FUNCTION HAS THE FOLLOWING PROPERTIES:
//      1. IT SHOULD BE FAST TO COMPUTE
//      2. IT SHOULD ASSIGN DIFFERENT VALUES TO DIFFERENT KEYS
//      3. IT SHOULD ASSIGN THE SAME VALUE TO THE SAME KEY EVERY TIME
//      4. IT SHOULD APPEAR TO BE RANDOM

function hashNumber(x) {
  return (x ** 2 - 6 * x + 11) % 9; // 9 is the size of the array we are using.
}

function hashString(str) {
  let hash = 0;
  for (let i = 0; i < str.length; i++) {
    hash += str.charCodeAt(i);
  }
  return hash % 10; // 10 is the size of the array we are using.
}

function hashObjectPerson(person) {
  let hash = 0;
  hash += person.name.charCodeAt(0) * 19;
  hash += person.age * 100;
  return hash % 5; // 100 is the size of the array we are using.
}
