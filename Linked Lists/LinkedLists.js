// LINKED LISTS

// ITS A SECUENCIAL COLLECTION OF NODES THAT ARE CONNECTED TO EACH OTHER AND HOLD DATA AND A POINTER TO THE NEXT NODE.

// THE FIRST NODE IS CALLED THE HEAD AND THE LAST NODE IS CALLED THE TAIL.

// THE LAST NODE POINTS TO NULL.

// WHEN YOU WANT TO ADD A NODE TO THE END OF THE LIST, YOU HAVE TO TRAVERSE THE WHOLE LIST TO FIND THE TAIL.

// WHEN YOU WANT TO ADD A NODE TO THE BEGINNING OF THE LIST, YOU HAVE TO CHANGE THE HEAD.

// WHEN YOU WANT TO ADD A NODE IN THE MIDDLE OF THE LIST, YOU HAVE TO TRAVERSE THE WHOLE LIST TO FIND THE NODE BEFORE THE NODE YOU WANT TO INSERT.

// WHEN YOU WANT TO REMOVE A NODE FROM THE END OF THE LIST, YOU HAVE TO TRAVERSE THE WHOLE LIST TO FIND THE NODE BEFORE THE TAIL.

// WHEN YOU WANT TO REMOVE A NODE FROM THE BEGINNING OF THE LIST, YOU HAVE TO CHANGE THE HEAD.

// WHEN YOU WANT TO REMOVE A NODE FROM THE MIDDLE OF THE LIST, YOU HAVE TO TRAVERSE THE WHOLE LIST TO FIND THE NODE BEFORE THE NODE YOU WANT TO REMOVE.

// WHEN YOU WANT TO SEARCH FOR A NODE IN THE LIST, YOU HAVE TO TRAVERSE THE WHOLE LIST.

// USED IN LISTS, STACKS, QUEUES, HASH TABLES, TREES, GRAPHS, ETC.

// SINGLY AND DOUBLY LINKED LISTS

// SINGLY LINKED LISTS USE LESS MEMORY BUT THEY ARE MORE DIFFICULT TO TRAVERSE.

// EACH NODE POINTS TO THE NEXT NODE IN THE LIST.

// DOUBLY LINKED LISTS USE MORE MEMORY BUT THEY ARE EASIER TO TRAVERSE (BACKWARDS).

// EACH NODE POINTS TO THE NEXT NODE AND THE PREVIOUS NODE IN THE LIST.

// COMPLEXITY

// 1 ACCESSING AN ELEMENT IN A LINKED LIST IS LINEAR TIME O(n)
// 2 INSERTING AN ELEMENT IN THE HEAD OF A LINKED LIST IS CONSTANT TIME O(1)
// 3 INSERTING AN ELEMENT IN THE TAIL OF A LINKED LIST IS CONSTANT TIME O(1)
// 4 INSERTING AN ELEMENT IN THE MIDDLE OF A LINKED LIST IS LINEAR TIME O(n)
// 5 DELETING AN ELEMENT IN THE HEAD OF A LINKED LIST IS CONSTANT TIME O(1)
// 6 DELETING AN ELEMENT IN THE TAIL OF A LINKED LIST IS LINEAR TIME O(n)
// 7 DELETING AN ELEMENT IN THE MIDDLE OF A LINKED LIST IS LINEAR TIME O(n)
